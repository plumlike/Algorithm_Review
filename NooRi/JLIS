#include <iostream>
#include <vector>
#include <algorithm>
#include <string.h>
using namespace std;
 
int n, m;
vector<int> arr1;
vector<int> arr2;
 
int dp[101][101];
 
int jlis(int index1, int index2) {
    if (dp[index1+1][index2+1] != -1)
        return dp[index1+1][index2+1];
    int ret = 0, comp = 0;
    if (index1 == -1 && index2 != -1) {
        comp = arr2[index2];
    }
    else if (index1 != -1 && index2 == -1) {
        comp = arr1[index1];
    }
    else if(index1 != -1 && index2 != -1){
        comp = max(arr1[index1], arr2[index2]);
    }
    
    for (int i = index1 + 1; i < n; ++i)
        if ((index1 == -1 && index2 == -1) || comp < arr1[i])
            ret = max(ret, jlis(i, index2) + 1);
    for (int i = index2 + 1; i < m; ++i)
        if ((index1 == -1 && index2 == -1) || comp < arr2[i])
            ret = max(ret, jlis(index1, i) + 1);
    dp[index1+1][index2+1] = ret;
    return ret;
}
 
int main() {
    int T, temp;
    cin >> T;
    while (T--) {
        arr1.clear();
        arr2.clear();
        memset(dp, -1, sizeof(dp));
        cin >> n >> m;
        for (int i = 0; i < n; ++i) {
            cin >> temp;
            arr1.push_back(temp);
        }
        for (int i = 0; i < m; ++i) {
            cin >> temp;
            arr2.push_back(temp);
        }
        
        int ret = 1;
        ret = max(ret, jlis(-1, -1));
        cout << ret << endl;
    }
    return 0;
}
